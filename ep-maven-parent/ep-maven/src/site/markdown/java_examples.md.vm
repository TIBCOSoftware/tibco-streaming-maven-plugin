# Java fragment examples

<!-- MACRO{toc|fromDepth=2} -->


#[[##]]# Codeline structure
  
The recommended java codeline structure is :
  
![Java directory structure](uml/java-structure.svg)


#[[##]]# Basic build, junit test and install

The following pom.xml will build, unit test and install to the local maven 
repository, a java fragment.

``` xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- vim: set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab : -->

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tibco.ep</groupId>
    <artifactId>jfrag</artifactId>
    <packaging>ep-java-fragment</packaging>
    <version>1.0.0</version>
    <name>hello world</name>

    <!-- common definitions for this version of StreamBase -->
    <parent>
        <groupId>com.tibco.ep.sb.parent</groupId>
        <artifactId>ep-java-fragment</artifactId>
        <version>10.4.0</version>
    </parent>

</project>
```

When the maven install goal is called (mvn install), this pom.xml instructs
maven to perform the following steps :
  
1. Uses [install-product](${context.get("site.ep-maven-plugin.url")}/install-product-mojo.html) to check if the 
    dependent product ( in this case com.tibco.ep.dtm:platform\_linuxx86_64 ) is
    installed.  If its not, maven will download the archive and the plugin
    will extract into $TIBCO\_EP\_HOME.
    
2. Uses the standard maven plugin [maven-compiler-plugin:compile](https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html)
    to compile the java sources to class files
    
3. Uses the standard maven plugin [maven-compiler-plugin:testCompile](https://maven.apache.org/plugins/maven-compiler-plugin/testCompile-mojo.html)
    to compile any java test sources to class files.
    
4. Uses [start-nodes](${context.get("site.ep-maven-plugin.url")}/start-nodes-mojo.html) to start a test cluster.  
    Since this pom.xml has no configuration, a single node is started 
    A.${artifactId} (ie A.helloworld in this example) with a random but unused 
    discovery port.
    
5. Uses [test-java-fragment](${context.get("site.ep-maven-plugin.url")}/test-java-fragment-mojo.html) to launch
    junit on the cluster and report the test results.  Should the test cases
    fail then no further processing occurs.
    
6. Uses [stop-nodes](${context.get("site.ep-maven-plugin.url")}/stop-nodes-mojo.html) to stop and remove the test 
    nodes
  
7. Uses [package-java-fragment](${context.get("site.ep-maven-plugin.url")}/package-java-fragment-mojo.html) to create
    a java fragment zip file in the build directory (by default, set to target)
    and attaches it to the build.
    
8. Uses the standard maven plugin [maven-install-plugin:install](https://maven.apache.org/plugins/maven-install-plugin/install-mojo.html)
    to install the built and tested artifacts to the local maven repository.
    
  
The java fragment application code, test cases and junit are deployed to the
test node :
  
![One node junit test](uml/one-node-junit.svg)


#[[##]]# Adding additional files to the java fragment

To add in any additional files, such as HOCON configurations or
ast.properties files, add them into a resource directory (by default, 
maven sets this to src/main/resources) and they will be included in the 
fragment zip.


#[[##]]# Java dependencies

If the project defines any java runtime dependencies, these jars are added
into the java fragment zip file.

For example the following dependency in a pom.xml :

``` xml
    <dependencies>
        ....
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.12</version>
        </dependency>
        ....
    </dependencies>
```

Will result in the zip file containing dependencies/java/org.slf4j-slf4j-api-1.7.12.jar.
Any further transitive dependencies are also added.


#[[##]]# Code Coverage

Java code coverage is not supported as of version 2.2.1.
